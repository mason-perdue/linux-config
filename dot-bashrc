# ~/.bashrc

# sudo dd bs=4M if=debian-*-amd64-netinst.iso of=/dev/disk/by-id/usb-_USB_DISK_3.0_*-0:0 conv=fsync oflag=direct status=progress
# cd && sudo apt update && sudo apt install -y curl && rm ~/.bashrc && curl --output ~/.bashrc https://raw.githubusercontent.com/mason-perdue/linux-config/refs/heads/main/dot-bashrc && source .bashrc && setupDebian

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# BASH Setup
HISTCONTROL=ignoreboth
shopt -s histappend
HISTSIZE=1000
HISTFILESIZE=2000
shopt -s checkwinsize
shopt -s autocd

# Change Bash Prompt
# https://bash-prompt-generator.org/
PROMPT_COMMAND='
  GIT_BRANCH=$(git branch --show-current 2>/dev/null)
  GIT_STATUS=$(git status --short 2>/dev/null)
  if [ -n "$GIT_BRANCH" ]; then
	if [ -n "$GIT_STATUS" ]; then
		PS1_GIT_INFO=$(printf "%b" "(\e[91m${GIT_BRANCH}\e[0m)\n\e[91m${GIT_STATUS}")
	else
		PS1_GIT_INFO=$(printf "%b" "(\e[91m${GIT_BRANCH}\e[0m)")
	fi
  else
    PS1_GIT_INFO=""
  fi'
PS1='\[\e[36m\]\u\[\e[94m\]@\h\[\e[93m\]:\w\[\e[0m\] ${PS1_GIT_INFO}\n  \[\e[31m\]\$\[\e[0m\] '

# Variables
export EDITOR='vim'

# Aliases
alias editBash="vim ~/linux-config/dot-bashrc"
alias ls='ls --color=auto'
alias ll='ls -lA'
alias la='ls -A'
alias dir='dir --color=auto'
alias vdir='vdir --color=auto'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias ip='ip -c'
alias cp='cp -r'
alias cu='cd ..'
alias cb='cd -'
alias mkdir='mkdir -p'
alias tree='tree -alC --dirsfirst'
alias formatPictures="exiftool -v '-FileName<CreateDate' -d '%Y%m%d-%H%M%S%%-03.c.%%e' ."
# alias formatMusic='exiftool -v "-filename<Unknown Artist - Untitled - ${Filename}.%e" "-filename<${Artist;s!/!_!g} - Untitled.%e" "-filename<Unknown Artist - ${Title;s!/!_!g}.%e" "-filename<${Artist;s!/!_!g} - ${Title;s!/!_!g}.%e" *.m4a'
alias countFiles='ls -1A | wc -l'
alias gitKey='eval "$(ssh-agent -s)" && ssh-add ~/.ssh/id_ed25519'
alias combinePDF='gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=temp.pdf *'
# alias jrnl='~/vim-journal/jrnl.sh'

# Functions
setupDebian(){
	echo ""
	echo "Updating and Installing Packages"
	echo "Computer Name (wsl/kitcom): "
	read input
	if [ "$input" == "wsl" ]; then
		# wsl --list --online
		# wsl --update
		# wsl --install Debian
			# set username and password
		# wsl --shutdown
		# wsl --unregister Debian
		echo "Installing Packages for WSL"
		yes | sudo apt update
		yes | sudo apt upgrade
		yes | sudo apt remove --purge vim-common vim-tiny
		yes | sudo apt autoremove --purge
		yes | sudo apt install curl vim usbutils rsync git htop man-db tree sane imagemagick libimage-exiftool-perl nmap ffmpeg bash-completion unattended-upgrades # gcc gdb gnugo gnuchess texlive-full openssh-client default-jdk octave
		# curl -fsSL https://install.julialang.org | sh
		# echo "Install Spotify from: https://www.spotify.com/us/download/linux/"
	elif [ "$input" == "kitcom" ]; then
		echo "Installing Packages for KitCom"
		yes | sudo apt update
		yes | sudo apt upgrade
		yes | sudo apt remove --purge vim-common vim-tiny
		yes | sudo apt autoremove --purge
		yes | sudo apt install vim curl usbutils rsync git htop man-db tree openssh-client imagemagick libimage-exiftool-perl nmap ffmpeg bash-completion sane unattended-upgrades
		echo "Install Chrome from: https://www.google.com/chrome/?platform=linux"
	fi

	echo ""
	echo "Configuring Git"
	# echo "Using: /home/$USER/.ssh/id_ed25519.pub"
	# echo "Generate Key With: ssh-keygen -t ed25519 -C '220426478+mason-perdue@users.noreply.github.com'"
	# echo "Configure Git w/ SSH (y/n): "
	# read input
	# if [ "$input" == "y" ]; then
	# 	sudo chmod 700 ~/.ssh/id*
		git config --global user.name mason-perdue
		git config --global user.email 220426478+mason-perdue@users.noreply.github.com
		# git config --global user.signingkey /home/$USER/.ssh/id_ed25519.pub
		git config --global core.editor vim
		git config --global init.defaultBranch main
		# git config --global commit.gpgsign true
		# git config --global gpg.format ssh
	# 	echo "Linking Bashrc"
	# 	cd
	# 	git clone git@github.com:mason-perdue/linux-config.git
	# 	rm ~/.bashrc
	# 	ln -s /home/$USER/linux-config/dot-bashrc /home/$USER/.bashrc
	# 	source ~/.bashrc
	# elif [ "$input" == "n" ]; then
		cd
		git clone https://github.com/mason-perdue/linux-config.git
		rm ~/.bashrc
		ln -s /home/$USER/linux-config/dot-bashrc /home/$USER/.bashrc
		source ~/.bashrc
	# fi
	# ssh -T git@github.com
	# git remote add origin git@github.com:mason-perdue/repo.git
	# git pull origin main
	# git init
	# git log
	# git diff

	# echo ""
	# echo "Configure Vim-Journal (y/n): "
	# read input
	# if [ "$input" == "y" ]; then
	# 	echo "Configuring Vim-Journal"
	# 	cd
	# 	git clone git@github.com:mason-perdue/vim-journal.git
	# 	chmod +x ~/vim-journal/jrnl.sh
	# fi

	# echo ""
	# echo "Configure Latexmk (y/n): "
	# read input
	# if [ "$input" == "y" ]; then
	# 	echo "Configuring Latexmk"
	# 	yes | sudo apt install evince
	# 	touch ~/.latexmk
	# 	echo '$pdf_previewer = "start evince";' > ~/.latexmk
	# fi

	# echo ""
	# echo "Install Openssh Server (y/n): "
	# read input
	# if [ "$input" == "y" ]; then
	# 	echo "Installing Openssh Server"
	# 	sudo apt install openssh-server
	# 	echo "Run: sudoedit /etc/ssh/sshd.config"
	# 	echo "Set: Port 7530"
	# 	echo "Set: PermitRootLogin no"
	# fi

	echo ""
}

updateDebian(){
	echo ""
	echo "Updating Packages"
	yes | sudo apt update
	yes | sudo apt upgrade
	yes | sudo apt autoremove --purge

	echo ""
	echo "Sourcing ~/.bashrc"
	source ~/.bashrc

	echo ""
}

myNmap(){
	# first argument should be target ip addr
	nmap -v -A -Pn -p 1-65535 "$1"
}

setupScan(){
	# usdbipd.exe list
	#ADMIN-pwsh>  usbipd bind --busid [busid]
	# usbipd.exe attach --wsl --busid [busid]
	# lsusb
	# usbipd.exe detach --busid [busid]
	usbipd.exe list
	echo "Enter BUSID (4-3): "
	read busid
	usbipd.exe attach --wsl --busid $busid
	sleep 1
	lsusb
	echo "Enter Dev Path (001/003): "
	read devPath
	sudo chown masonp:masonp /dev/bus/usb/$devPath
}

docScan(){
	# documents should be face down and upside down
	if [ -n "$1" ]; then
		mkdir tmp
		cd tmp
		scanimage --format=pnm --verbose --progress --resolution=300 --batch=out%03d.pnm --device='fujitsu:ScanSnap S1500:272145' --source 'ADF Duplex'
		# sudoedit /etc/ImageMagick*/policy.xml	# change none to read|write for pdf and change memory to 4GiB
		convert out*.pnm -deskew 40% -density 150 -verbose $1.pdf
		mv $1.pdf ../
		# rm *.pnm
		cd ..
		# rmdir tmp
	else
		echo "Error: Input file name"
	fi
}

# mov2mp4(){
# 	for f in *.MOV; do
# 		ffmpeg -i $f $f.mp4
# 	done
# 	rename ".MOV.mp4" ".mp4" *
# 	rm *.MOV
# }

# folderMusic(){
# 	rename -av "/" "" *
# 	for f in *; do
# 		mkdir "${f%%-*}"
# 		mv $f "${f%%-*}"/
# 	done
# }

# lexe(){
# 	if [ -n "$1" ]; then
# 		if [ "$1" == "c" ]; then
# 			latexmk -c
# 		elif [ "$1" == "C" ]; then
# 			latexmk -C
# 		else
# 			latexmk --auxdir=aux --pvc --pdf --view=none "$1"
# 		fi
# 	else
# 		echo "Error: Input file name"
# 	fi
# }

gitPush(){
	if [ -n "$1" ]; then
		git add --all
		git commit -m "$1"
		git push origin main
	else
		echo "Error: Input Commit Message"
	fi
}

gitCommit(){
	if [ -n "$1" ]; then
		git add --all
		git commit -m "$1"
	else
		echo "Error: Input Commit Message"
	fi
}

# Completion
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
